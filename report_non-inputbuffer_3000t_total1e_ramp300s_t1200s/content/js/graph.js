/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 186802.0, "series": [{"data": [[0.0, 1.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 3.0], [0.7, 3.0], [0.8, 3.0], [0.9, 3.0], [1.0, 3.0], [1.1, 3.0], [1.2, 3.0], [1.3, 4.0], [1.4, 4.0], [1.5, 4.0], [1.6, 4.0], [1.7, 4.0], [1.8, 4.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 7.0], [3.4, 7.0], [3.5, 7.0], [3.6, 7.0], [3.7, 7.0], [3.8, 7.0], [3.9, 7.0], [4.0, 7.0], [4.1, 7.0], [4.2, 7.0], [4.3, 8.0], [4.4, 8.0], [4.5, 8.0], [4.6, 8.0], [4.7, 8.0], [4.8, 8.0], [4.9, 8.0], [5.0, 8.0], [5.1, 8.0], [5.2, 8.0], [5.3, 8.0], [5.4, 8.0], [5.5, 8.0], [5.6, 9.0], [5.7, 9.0], [5.8, 9.0], [5.9, 9.0], [6.0, 9.0], [6.1, 9.0], [6.2, 9.0], [6.3, 9.0], [6.4, 9.0], [6.5, 9.0], [6.6, 9.0], [6.7, 9.0], [6.8, 9.0], [6.9, 9.0], [7.0, 9.0], [7.1, 9.0], [7.2, 9.0], [7.3, 9.0], [7.4, 9.0], [7.5, 10.0], [7.6, 10.0], [7.7, 10.0], [7.8, 10.0], [7.9, 10.0], [8.0, 10.0], [8.1, 10.0], [8.2, 10.0], [8.3, 10.0], [8.4, 10.0], [8.5, 10.0], [8.6, 10.0], [8.7, 10.0], [8.8, 10.0], [8.9, 10.0], [9.0, 10.0], [9.1, 10.0], [9.2, 10.0], [9.3, 10.0], [9.4, 10.0], [9.5, 10.0], [9.6, 10.0], [9.7, 10.0], [9.8, 10.0], [9.9, 10.0], [10.0, 10.0], [10.1, 10.0], [10.2, 10.0], [10.3, 11.0], [10.4, 11.0], [10.5, 11.0], [10.6, 11.0], [10.7, 11.0], [10.8, 11.0], [10.9, 11.0], [11.0, 11.0], [11.1, 11.0], [11.2, 11.0], [11.3, 11.0], [11.4, 11.0], [11.5, 11.0], [11.6, 11.0], [11.7, 11.0], [11.8, 11.0], [11.9, 11.0], [12.0, 11.0], [12.1, 11.0], [12.2, 11.0], [12.3, 11.0], [12.4, 11.0], [12.5, 11.0], [12.6, 11.0], [12.7, 11.0], [12.8, 11.0], [12.9, 11.0], [13.0, 11.0], [13.1, 11.0], [13.2, 11.0], [13.3, 11.0], [13.4, 11.0], [13.5, 11.0], [13.6, 11.0], [13.7, 11.0], [13.8, 11.0], [13.9, 11.0], [14.0, 11.0], [14.1, 12.0], [14.2, 12.0], [14.3, 12.0], [14.4, 12.0], [14.5, 12.0], [14.6, 12.0], [14.7, 12.0], [14.8, 12.0], [14.9, 12.0], [15.0, 12.0], [15.1, 12.0], [15.2, 12.0], [15.3, 12.0], [15.4, 12.0], [15.5, 12.0], [15.6, 12.0], [15.7, 12.0], [15.8, 12.0], [15.9, 12.0], [16.0, 12.0], [16.1, 12.0], [16.2, 12.0], [16.3, 12.0], [16.4, 12.0], [16.5, 12.0], [16.6, 12.0], [16.7, 12.0], [16.8, 12.0], [16.9, 12.0], [17.0, 12.0], [17.1, 12.0], [17.2, 12.0], [17.3, 12.0], [17.4, 12.0], [17.5, 12.0], [17.6, 12.0], [17.7, 12.0], [17.8, 12.0], [17.9, 12.0], [18.0, 12.0], [18.1, 12.0], [18.2, 12.0], [18.3, 12.0], [18.4, 12.0], [18.5, 12.0], [18.6, 12.0], [18.7, 12.0], [18.8, 12.0], [18.9, 12.0], [19.0, 12.0], [19.1, 13.0], [19.2, 13.0], [19.3, 13.0], [19.4, 13.0], [19.5, 13.0], [19.6, 13.0], [19.7, 13.0], [19.8, 13.0], [19.9, 13.0], [20.0, 13.0], [20.1, 13.0], [20.2, 13.0], [20.3, 13.0], [20.4, 13.0], [20.5, 13.0], [20.6, 13.0], [20.7, 13.0], [20.8, 13.0], [20.9, 13.0], [21.0, 13.0], [21.1, 13.0], [21.2, 13.0], [21.3, 13.0], [21.4, 13.0], [21.5, 13.0], [21.6, 13.0], [21.7, 13.0], [21.8, 13.0], [21.9, 13.0], [22.0, 13.0], [22.1, 13.0], [22.2, 13.0], [22.3, 13.0], [22.4, 13.0], [22.5, 13.0], [22.6, 13.0], [22.7, 13.0], [22.8, 13.0], [22.9, 13.0], [23.0, 13.0], [23.1, 13.0], [23.2, 13.0], [23.3, 13.0], [23.4, 13.0], [23.5, 13.0], [23.6, 13.0], [23.7, 13.0], [23.8, 13.0], [23.9, 13.0], [24.0, 13.0], [24.1, 13.0], [24.2, 13.0], [24.3, 13.0], [24.4, 13.0], [24.5, 13.0], [24.6, 13.0], [24.7, 13.0], [24.8, 13.0], [24.9, 13.0], [25.0, 13.0], [25.1, 13.0], [25.2, 13.0], [25.3, 14.0], [25.4, 14.0], [25.5, 14.0], [25.6, 14.0], [25.7, 14.0], [25.8, 14.0], [25.9, 14.0], [26.0, 14.0], [26.1, 14.0], [26.2, 14.0], [26.3, 14.0], [26.4, 14.0], [26.5, 14.0], [26.6, 14.0], [26.7, 14.0], [26.8, 14.0], [26.9, 14.0], [27.0, 14.0], [27.1, 14.0], [27.2, 14.0], [27.3, 14.0], [27.4, 14.0], [27.5, 14.0], [27.6, 14.0], [27.7, 14.0], [27.8, 14.0], [27.9, 14.0], [28.0, 14.0], [28.1, 14.0], [28.2, 14.0], [28.3, 14.0], [28.4, 14.0], [28.5, 14.0], [28.6, 14.0], [28.7, 14.0], [28.8, 14.0], [28.9, 14.0], [29.0, 14.0], [29.1, 14.0], [29.2, 14.0], [29.3, 14.0], [29.4, 14.0], [29.5, 14.0], [29.6, 14.0], [29.7, 14.0], [29.8, 14.0], [29.9, 14.0], [30.0, 14.0], [30.1, 14.0], [30.2, 14.0], [30.3, 14.0], [30.4, 14.0], [30.5, 14.0], [30.6, 14.0], [30.7, 14.0], [30.8, 14.0], [30.9, 14.0], [31.0, 14.0], [31.1, 14.0], [31.2, 14.0], [31.3, 14.0], [31.4, 14.0], [31.5, 14.0], [31.6, 14.0], [31.7, 14.0], [31.8, 14.0], [31.9, 14.0], [32.0, 14.0], [32.1, 14.0], [32.2, 14.0], [32.3, 14.0], [32.4, 14.0], [32.5, 14.0], [32.6, 14.0], [32.7, 14.0], [32.8, 14.0], [32.9, 14.0], [33.0, 14.0], [33.1, 15.0], [33.2, 15.0], [33.3, 15.0], [33.4, 15.0], [33.5, 15.0], [33.6, 15.0], [33.7, 15.0], [33.8, 15.0], [33.9, 15.0], [34.0, 15.0], [34.1, 15.0], [34.2, 15.0], [34.3, 15.0], [34.4, 15.0], [34.5, 15.0], [34.6, 15.0], [34.7, 15.0], [34.8, 15.0], [34.9, 15.0], [35.0, 15.0], [35.1, 15.0], [35.2, 15.0], [35.3, 15.0], [35.4, 15.0], [35.5, 15.0], [35.6, 15.0], [35.7, 15.0], [35.8, 15.0], [35.9, 15.0], [36.0, 15.0], [36.1, 15.0], [36.2, 15.0], [36.3, 15.0], [36.4, 15.0], [36.5, 15.0], [36.6, 15.0], [36.7, 15.0], [36.8, 15.0], [36.9, 15.0], [37.0, 15.0], [37.1, 15.0], [37.2, 15.0], [37.3, 15.0], [37.4, 15.0], [37.5, 15.0], [37.6, 15.0], [37.7, 15.0], [37.8, 15.0], [37.9, 15.0], [38.0, 15.0], [38.1, 15.0], [38.2, 15.0], [38.3, 15.0], [38.4, 15.0], [38.5, 15.0], [38.6, 15.0], [38.7, 15.0], [38.8, 15.0], [38.9, 15.0], [39.0, 15.0], [39.1, 15.0], [39.2, 15.0], [39.3, 15.0], [39.4, 15.0], [39.5, 15.0], [39.6, 15.0], [39.7, 15.0], [39.8, 15.0], [39.9, 15.0], [40.0, 15.0], [40.1, 15.0], [40.2, 15.0], [40.3, 15.0], [40.4, 15.0], [40.5, 15.0], [40.6, 15.0], [40.7, 15.0], [40.8, 15.0], [40.9, 15.0], [41.0, 15.0], [41.1, 15.0], [41.2, 15.0], [41.3, 15.0], [41.4, 15.0], [41.5, 15.0], [41.6, 15.0], [41.7, 15.0], [41.8, 15.0], [41.9, 15.0], [42.0, 15.0], [42.1, 15.0], [42.2, 15.0], [42.3, 15.0], [42.4, 15.0], [42.5, 15.0], [42.6, 15.0], [42.7, 15.0], [42.8, 15.0], [42.9, 15.0], [43.0, 15.0], [43.1, 15.0], [43.2, 15.0], [43.3, 16.0], [43.4, 16.0], [43.5, 16.0], [43.6, 16.0], [43.7, 16.0], [43.8, 16.0], [43.9, 16.0], [44.0, 16.0], [44.1, 16.0], [44.2, 16.0], [44.3, 16.0], [44.4, 16.0], [44.5, 16.0], [44.6, 16.0], [44.7, 16.0], [44.8, 16.0], [44.9, 16.0], [45.0, 16.0], [45.1, 16.0], [45.2, 16.0], [45.3, 16.0], [45.4, 16.0], [45.5, 16.0], [45.6, 16.0], [45.7, 16.0], [45.8, 16.0], [45.9, 16.0], [46.0, 16.0], [46.1, 16.0], [46.2, 16.0], [46.3, 16.0], [46.4, 16.0], [46.5, 16.0], [46.6, 16.0], [46.7, 16.0], [46.8, 16.0], [46.9, 16.0], [47.0, 16.0], [47.1, 16.0], [47.2, 16.0], [47.3, 16.0], [47.4, 16.0], [47.5, 16.0], [47.6, 16.0], [47.7, 16.0], [47.8, 16.0], [47.9, 16.0], [48.0, 16.0], [48.1, 16.0], [48.2, 16.0], [48.3, 16.0], [48.4, 16.0], [48.5, 16.0], [48.6, 16.0], [48.7, 16.0], [48.8, 16.0], [48.9, 16.0], [49.0, 16.0], [49.1, 16.0], [49.2, 16.0], [49.3, 16.0], [49.4, 16.0], [49.5, 16.0], [49.6, 16.0], [49.7, 16.0], [49.8, 16.0], [49.9, 16.0], [50.0, 16.0], [50.1, 16.0], [50.2, 16.0], [50.3, 16.0], [50.4, 16.0], [50.5, 16.0], [50.6, 16.0], [50.7, 16.0], [50.8, 16.0], [50.9, 16.0], [51.0, 16.0], [51.1, 16.0], [51.2, 16.0], [51.3, 16.0], [51.4, 16.0], [51.5, 16.0], [51.6, 16.0], [51.7, 16.0], [51.8, 16.0], [51.9, 16.0], [52.0, 16.0], [52.1, 16.0], [52.2, 16.0], [52.3, 16.0], [52.4, 16.0], [52.5, 16.0], [52.6, 16.0], [52.7, 16.0], [52.8, 16.0], [52.9, 16.0], [53.0, 16.0], [53.1, 16.0], [53.2, 16.0], [53.3, 16.0], [53.4, 16.0], [53.5, 16.0], [53.6, 16.0], [53.7, 16.0], [53.8, 16.0], [53.9, 16.0], [54.0, 17.0], [54.1, 17.0], [54.2, 17.0], [54.3, 17.0], [54.4, 17.0], [54.5, 17.0], [54.6, 17.0], [54.7, 17.0], [54.8, 17.0], [54.9, 17.0], [55.0, 17.0], [55.1, 17.0], [55.2, 17.0], [55.3, 17.0], [55.4, 17.0], [55.5, 17.0], [55.6, 17.0], [55.7, 17.0], [55.8, 17.0], [55.9, 17.0], [56.0, 17.0], [56.1, 17.0], [56.2, 17.0], [56.3, 17.0], [56.4, 17.0], [56.5, 17.0], [56.6, 17.0], [56.7, 17.0], [56.8, 17.0], [56.9, 17.0], [57.0, 17.0], [57.1, 17.0], [57.2, 17.0], [57.3, 17.0], [57.4, 17.0], [57.5, 17.0], [57.6, 17.0], [57.7, 17.0], [57.8, 17.0], [57.9, 17.0], [58.0, 17.0], [58.1, 17.0], [58.2, 17.0], [58.3, 17.0], [58.4, 17.0], [58.5, 17.0], [58.6, 17.0], [58.7, 17.0], [58.8, 17.0], [58.9, 17.0], [59.0, 17.0], [59.1, 17.0], [59.2, 17.0], [59.3, 17.0], [59.4, 17.0], [59.5, 17.0], [59.6, 17.0], [59.7, 17.0], [59.8, 17.0], [59.9, 17.0], [60.0, 17.0], [60.1, 17.0], [60.2, 17.0], [60.3, 17.0], [60.4, 17.0], [60.5, 17.0], [60.6, 17.0], [60.7, 17.0], [60.8, 17.0], [60.9, 17.0], [61.0, 17.0], [61.1, 17.0], [61.2, 17.0], [61.3, 17.0], [61.4, 17.0], [61.5, 17.0], [61.6, 17.0], [61.7, 17.0], [61.8, 17.0], [61.9, 17.0], [62.0, 17.0], [62.1, 17.0], [62.2, 17.0], [62.3, 18.0], [62.4, 18.0], [62.5, 18.0], [62.6, 18.0], [62.7, 18.0], [62.8, 18.0], [62.9, 18.0], [63.0, 18.0], [63.1, 18.0], [63.2, 18.0], [63.3, 18.0], [63.4, 18.0], [63.5, 18.0], [63.6, 18.0], [63.7, 18.0], [63.8, 18.0], [63.9, 18.0], [64.0, 18.0], [64.1, 18.0], [64.2, 18.0], [64.3, 18.0], [64.4, 18.0], [64.5, 18.0], [64.6, 18.0], [64.7, 18.0], [64.8, 18.0], [64.9, 18.0], [65.0, 18.0], [65.1, 18.0], [65.2, 18.0], [65.3, 18.0], [65.4, 18.0], [65.5, 18.0], [65.6, 18.0], [65.7, 18.0], [65.8, 18.0], [65.9, 18.0], [66.0, 18.0], [66.1, 18.0], [66.2, 18.0], [66.3, 18.0], [66.4, 18.0], [66.5, 18.0], [66.6, 18.0], [66.7, 18.0], [66.8, 18.0], [66.9, 18.0], [67.0, 18.0], [67.1, 18.0], [67.2, 18.0], [67.3, 18.0], [67.4, 18.0], [67.5, 18.0], [67.6, 18.0], [67.7, 18.0], [67.8, 18.0], [67.9, 18.0], [68.0, 18.0], [68.1, 18.0], [68.2, 18.0], [68.3, 18.0], [68.4, 18.0], [68.5, 18.0], [68.6, 19.0], [68.7, 19.0], [68.8, 19.0], [68.9, 19.0], [69.0, 19.0], [69.1, 19.0], [69.2, 19.0], [69.3, 19.0], [69.4, 19.0], [69.5, 19.0], [69.6, 19.0], [69.7, 19.0], [69.8, 19.0], [69.9, 19.0], [70.0, 19.0], [70.1, 19.0], [70.2, 19.0], [70.3, 19.0], [70.4, 19.0], [70.5, 19.0], [70.6, 19.0], [70.7, 19.0], [70.8, 19.0], [70.9, 19.0], [71.0, 19.0], [71.1, 19.0], [71.2, 19.0], [71.3, 19.0], [71.4, 19.0], [71.5, 19.0], [71.6, 19.0], [71.7, 19.0], [71.8, 19.0], [71.9, 19.0], [72.0, 19.0], [72.1, 19.0], [72.2, 19.0], [72.3, 19.0], [72.4, 19.0], [72.5, 19.0], [72.6, 19.0], [72.7, 19.0], [72.8, 19.0], [72.9, 19.0], [73.0, 19.0], [73.1, 19.0], [73.2, 19.0], [73.3, 19.0], [73.4, 19.0], [73.5, 20.0], [73.6, 20.0], [73.7, 20.0], [73.8, 20.0], [73.9, 20.0], [74.0, 20.0], [74.1, 20.0], [74.2, 20.0], [74.3, 20.0], [74.4, 20.0], [74.5, 20.0], [74.6, 20.0], [74.7, 20.0], [74.8, 20.0], [74.9, 20.0], [75.0, 20.0], [75.1, 20.0], [75.2, 20.0], [75.3, 20.0], [75.4, 20.0], [75.5, 20.0], [75.6, 20.0], [75.7, 20.0], [75.8, 20.0], [75.9, 20.0], [76.0, 20.0], [76.1, 20.0], [76.2, 20.0], [76.3, 20.0], [76.4, 20.0], [76.5, 20.0], [76.6, 20.0], [76.7, 20.0], [76.8, 20.0], [76.9, 20.0], [77.0, 20.0], [77.1, 20.0], [77.2, 20.0], [77.3, 20.0], [77.4, 21.0], [77.5, 21.0], [77.6, 21.0], [77.7, 21.0], [77.8, 21.0], [77.9, 21.0], [78.0, 21.0], [78.1, 21.0], [78.2, 21.0], [78.3, 21.0], [78.4, 21.0], [78.5, 21.0], [78.6, 21.0], [78.7, 21.0], [78.8, 21.0], [78.9, 21.0], [79.0, 21.0], [79.1, 21.0], [79.2, 21.0], [79.3, 21.0], [79.4, 21.0], [79.5, 21.0], [79.6, 21.0], [79.7, 21.0], [79.8, 21.0], [79.9, 21.0], [80.0, 21.0], [80.1, 21.0], [80.2, 21.0], [80.3, 21.0], [80.4, 22.0], [80.5, 22.0], [80.6, 22.0], [80.7, 22.0], [80.8, 22.0], [80.9, 22.0], [81.0, 22.0], [81.1, 22.0], [81.2, 22.0], [81.3, 22.0], [81.4, 22.0], [81.5, 22.0], [81.6, 22.0], [81.7, 22.0], [81.8, 22.0], [81.9, 22.0], [82.0, 22.0], [82.1, 22.0], [82.2, 22.0], [82.3, 22.0], [82.4, 22.0], [82.5, 22.0], [82.6, 22.0], [82.7, 22.0], [82.8, 23.0], [82.9, 23.0], [83.0, 23.0], [83.1, 23.0], [83.2, 23.0], [83.3, 23.0], [83.4, 23.0], [83.5, 23.0], [83.6, 23.0], [83.7, 23.0], [83.8, 23.0], [83.9, 23.0], [84.0, 23.0], [84.1, 23.0], [84.2, 23.0], [84.3, 23.0], [84.4, 23.0], [84.5, 23.0], [84.6, 23.0], [84.7, 23.0], [84.8, 24.0], [84.9, 24.0], [85.0, 24.0], [85.1, 24.0], [85.2, 24.0], [85.3, 24.0], [85.4, 24.0], [85.5, 24.0], [85.6, 24.0], [85.7, 24.0], [85.8, 24.0], [85.9, 24.0], [86.0, 24.0], [86.1, 24.0], [86.2, 24.0], [86.3, 24.0], [86.4, 25.0], [86.5, 25.0], [86.6, 25.0], [86.7, 25.0], [86.8, 25.0], [86.9, 25.0], [87.0, 25.0], [87.1, 25.0], [87.2, 25.0], [87.3, 25.0], [87.4, 25.0], [87.5, 25.0], [87.6, 25.0], [87.7, 25.0], [87.8, 26.0], [87.9, 26.0], [88.0, 26.0], [88.1, 26.0], [88.2, 26.0], [88.3, 26.0], [88.4, 26.0], [88.5, 26.0], [88.6, 26.0], [88.7, 26.0], [88.8, 26.0], [88.9, 27.0], [89.0, 27.0], [89.1, 27.0], [89.2, 27.0], [89.3, 27.0], [89.4, 27.0], [89.5, 27.0], [89.6, 27.0], [89.7, 28.0], [89.8, 28.0], [89.9, 28.0], [90.0, 28.0], [90.1, 28.0], [90.2, 28.0], [90.3, 28.0], [90.4, 29.0], [90.5, 29.0], [90.6, 29.0], [90.7, 29.0], [90.8, 29.0], [90.9, 29.0], [91.0, 30.0], [91.1, 30.0], [91.2, 30.0], [91.3, 30.0], [91.4, 30.0], [91.5, 31.0], [91.6, 31.0], [91.7, 31.0], [91.8, 32.0], [91.9, 32.0], [92.0, 32.0], [92.1, 33.0], [92.2, 33.0], [92.3, 34.0], [92.4, 34.0], [92.5, 35.0], [92.6, 35.0], [92.7, 36.0], [92.8, 37.0], [92.9, 38.0], [93.0, 39.0], [93.1, 40.0], [93.2, 41.0], [93.3, 41.0], [93.4, 42.0], [93.5, 43.0], [93.6, 45.0], [93.7, 74.0], [93.8, 76.0], [93.9, 78.0], [94.0, 78.0], [94.1, 79.0], [94.2, 79.0], [94.3, 79.0], [94.4, 79.0], [94.5, 79.0], [94.6, 80.0], [94.7, 80.0], [94.8, 80.0], [94.9, 80.0], [95.0, 80.0], [95.1, 80.0], [95.2, 80.0], [95.3, 80.0], [95.4, 81.0], [95.5, 81.0], [95.6, 81.0], [95.7, 81.0], [95.8, 82.0], [95.9, 83.0], [96.0, 101.0], [96.1, 117.0], [96.2, 119.0], [96.3, 141.0], [96.4, 198.0], [96.5, 240.0], [96.6, 278.0], [96.7, 280.0], [96.8, 282.0], [96.9, 283.0], [97.0, 316.0], [97.1, 319.0], [97.2, 320.0], [97.3, 321.0], [97.4, 355.0], [97.5, 363.0], [97.6, 477.0], [97.7, 521.0], [97.8, 559.0], [97.9, 681.0], [98.0, 6595.0], [98.1, 17543.0], [98.2, 29899.0], [98.3, 40677.0], [98.4, 53541.0], [98.5, 57170.0], [98.6, 58189.0], [98.7, 58577.0], [98.8, 58666.0], [98.9, 58725.0], [99.0, 58776.0], [99.1, 58825.0], [99.2, 58866.0], [99.3, 58933.0], [99.4, 59008.0], [99.5, 59088.0], [99.6, 59214.0], [99.7, 59555.0], [99.8, 60883.0], [99.9, 65723.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 453370.0, "series": [{"data": [[0.0, 453370.0], [135200.0, 3.0], [66700.0, 2.0], [73100.0, 1.0], [69900.0, 1.0], [76300.0, 2.0], [89100.0, 1.0], [114700.0, 1.0], [124300.0, 3.0], [127500.0, 1.0], [100.0, 2011.0], [32900.0, 7.0], [34500.0, 5.0], [134700.0, 1.0], [36100.0, 5.0], [37700.0, 1.0], [39300.0, 5.0], [40900.0, 5.0], [42500.0, 3.0], [44100.0, 4.0], [45700.0, 3.0], [47300.0, 3.0], [48900.0, 4.0], [50500.0, 1.0], [200.0, 2426.0], [52100.0, 3.0], [53700.0, 5.0], [55300.0, 2.0], [56900.0, 47.0], [58500.0, 362.0], [60100.0, 26.0], [61700.0, 16.0], [63300.0, 5.0], [64900.0, 8.0], [65800.0, 2.0], [69000.0, 4.0], [72200.0, 1.0], [300.0, 2811.0], [75400.0, 1.0], [78600.0, 1.0], [91400.0, 1.0], [94600.0, 2.0], [400.0, 533.0], [126600.0, 1.0], [500.0, 1044.0], [132400.0, 2.0], [600.0, 203.0], [700.0, 193.0], [800.0, 64.0], [900.0, 31.0], [1000.0, 17.0], [1100.0, 8.0], [1200.0, 5.0], [1300.0, 4.0], [1500.0, 4.0], [1600.0, 1.0], [1700.0, 3.0], [1800.0, 5.0], [1900.0, 2.0], [2000.0, 2.0], [2100.0, 3.0], [2300.0, 3.0], [2400.0, 2.0], [2500.0, 3.0], [2600.0, 3.0], [2700.0, 3.0], [2800.0, 2.0], [2900.0, 2.0], [3000.0, 3.0], [3100.0, 4.0], [3200.0, 1.0], [3300.0, 2.0], [3400.0, 4.0], [3500.0, 3.0], [3600.0, 4.0], [3700.0, 2.0], [3800.0, 2.0], [3900.0, 1.0], [4000.0, 3.0], [4200.0, 3.0], [68100.0, 7.0], [4600.0, 2.0], [4400.0, 4.0], [4800.0, 2.0], [77700.0, 2.0], [5000.0, 2.0], [5200.0, 1.0], [5400.0, 7.0], [5600.0, 5.0], [5800.0, 3.0], [90500.0, 1.0], [93700.0, 1.0], [6000.0, 5.0], [96900.0, 1.0], [6200.0, 3.0], [6400.0, 4.0], [6600.0, 9.0], [6800.0, 3.0], [7000.0, 1.0], [7400.0, 2.0], [7200.0, 5.0], [7600.0, 4.0], [7800.0, 1.0], [125700.0, 2.0], [8000.0, 3.0], [8400.0, 7.0], [134200.0, 1.0], [9200.0, 9.0], [8800.0, 3.0], [9600.0, 5.0], [10000.0, 5.0], [10400.0, 5.0], [10800.0, 4.0], [11200.0, 3.0], [11600.0, 5.0], [12000.0, 4.0], [12400.0, 8.0], [12800.0, 3.0], [13200.0, 5.0], [13600.0, 10.0], [14000.0, 6.0], [14400.0, 7.0], [14800.0, 4.0], [15200.0, 2.0], [15600.0, 2.0], [16000.0, 6.0], [16800.0, 5.0], [17600.0, 3.0], [18400.0, 3.0], [19200.0, 3.0], [20000.0, 3.0], [20800.0, 4.0], [21600.0, 3.0], [22400.0, 4.0], [23200.0, 7.0], [24000.0, 3.0], [24800.0, 4.0], [25600.0, 6.0], [26400.0, 5.0], [27200.0, 2.0], [28000.0, 4.0], [28800.0, 7.0], [29600.0, 2.0], [30400.0, 5.0], [31200.0, 5.0], [32000.0, 12.0], [33600.0, 4.0], [35200.0, 2.0], [36800.0, 3.0], [38400.0, 4.0], [40000.0, 3.0], [41600.0, 4.0], [43200.0, 4.0], [44800.0, 5.0], [46400.0, 5.0], [48000.0, 3.0], [49600.0, 1.0], [51200.0, 8.0], [52800.0, 3.0], [54400.0, 4.0], [56000.0, 25.0], [57600.0, 49.0], [59200.0, 216.0], [60800.0, 26.0], [62400.0, 10.0], [64000.0, 5.0], [67200.0, 4.0], [73600.0, 2.0], [76800.0, 4.0], [80000.0, 1.0], [89600.0, 1.0], [92800.0, 2.0], [96000.0, 1.0], [121600.0, 1.0], [132100.0, 1.0], [67100.0, 2.0], [70300.0, 1.0], [76700.0, 2.0], [83100.0, 1.0], [89500.0, 2.0], [118300.0, 1.0], [33100.0, 3.0], [34700.0, 5.0], [36300.0, 5.0], [37900.0, 4.0], [39500.0, 3.0], [41100.0, 4.0], [42700.0, 5.0], [44300.0, 2.0], [45900.0, 2.0], [47500.0, 3.0], [49100.0, 7.0], [50700.0, 4.0], [52300.0, 6.0], [53900.0, 3.0], [55500.0, 9.0], [57100.0, 30.0], [58700.0, 886.0], [60300.0, 20.0], [61900.0, 17.0], [65100.0, 9.0], [63500.0, 4.0], [69400.0, 3.0], [66200.0, 2.0], [75800.0, 1.0], [79000.0, 5.0], [135700.0, 1.0], [68500.0, 6.0], [71700.0, 2.0], [74900.0, 1.0], [126100.0, 3.0], [122900.0, 1.0], [16900.0, 3.0], [17700.0, 5.0], [18500.0, 5.0], [19300.0, 5.0], [20100.0, 3.0], [20900.0, 5.0], [21700.0, 2.0], [22500.0, 6.0], [23300.0, 2.0], [24100.0, 6.0], [24900.0, 4.0], [25700.0, 3.0], [26500.0, 1.0], [27300.0, 7.0], [28100.0, 2.0], [28900.0, 3.0], [29700.0, 7.0], [30500.0, 8.0], [31300.0, 2.0], [32100.0, 6.0], [33800.0, 7.0], [35400.0, 2.0], [37000.0, 4.0], [38600.0, 3.0], [40200.0, 3.0], [41800.0, 2.0], [43400.0, 2.0], [45000.0, 1.0], [46600.0, 2.0], [48200.0, 3.0], [49800.0, 3.0], [53000.0, 8.0], [51400.0, 1.0], [54600.0, 1.0], [56200.0, 16.0], [57800.0, 51.0], [59400.0, 118.0], [61000.0, 20.0], [62600.0, 13.0], [64200.0, 9.0], [67600.0, 6.0], [70800.0, 2.0], [77200.0, 2.0], [74000.0, 1.0], [93200.0, 3.0], [99600.0, 1.0], [115600.0, 1.0], [118800.0, 1.0], [125200.0, 1.0], [67500.0, 2.0], [77100.0, 2.0], [73900.0, 1.0], [89900.0, 1.0], [109100.0, 1.0], [33300.0, 5.0], [136300.0, 8.0], [36500.0, 2.0], [38100.0, 4.0], [39700.0, 2.0], [41300.0, 3.0], [42900.0, 3.0], [44500.0, 2.0], [46100.0, 4.0], [47700.0, 7.0], [49300.0, 3.0], [50900.0, 7.0], [52500.0, 5.0], [54100.0, 5.0], [55700.0, 8.0], [57300.0, 51.0], [58900.0, 642.0], [60500.0, 22.0], [62100.0, 11.0], [63700.0, 6.0], [65300.0, 4.0], [66600.0, 4.0], [73000.0, 1.0], [76200.0, 2.0], [92200.0, 1.0], [98600.0, 1.0], [117800.0, 1.0], [127400.0, 4.0], [65700.0, 6.0], [68900.0, 2.0], [72100.0, 2.0], [78500.0, 2.0], [81700.0, 1.0], [97700.0, 1.0], [94500.0, 2.0], [8500.0, 5.0], [135800.0, 2.0], [8900.0, 3.0], [9300.0, 3.0], [9700.0, 9.0], [10100.0, 3.0], [10500.0, 5.0], [10900.0, 3.0], [11300.0, 5.0], [11700.0, 4.0], [12100.0, 3.0], [12500.0, 3.0], [12900.0, 4.0], [13300.0, 3.0], [13700.0, 1.0], [14100.0, 2.0], [14500.0, 13.0], [15300.0, 1.0], [14900.0, 6.0], [15700.0, 1.0], [16100.0, 8.0], [17000.0, 3.0], [17800.0, 7.0], [19400.0, 3.0], [18600.0, 4.0], [21000.0, 4.0], [21800.0, 1.0], [22600.0, 2.0], [23400.0, 2.0], [24200.0, 4.0], [25000.0, 4.0], [25800.0, 4.0], [26600.0, 2.0], [27400.0, 1.0], [28200.0, 4.0], [29000.0, 4.0], [29800.0, 2.0], [30600.0, 3.0], [31400.0, 2.0], [32200.0, 4.0], [34000.0, 2.0], [133500.0, 2.0], [35600.0, 6.0], [37200.0, 6.0], [38800.0, 5.0], [40400.0, 5.0], [42000.0, 3.0], [43600.0, 4.0], [45200.0, 1.0], [46800.0, 2.0], [48400.0, 2.0], [50000.0, 2.0], [51600.0, 5.0], [53200.0, 3.0], [54800.0, 6.0], [56400.0, 18.0], [58000.0, 40.0], [59600.0, 62.0], [61200.0, 17.0], [62800.0, 11.0], [64400.0, 8.0], [68000.0, 6.0], [74400.0, 2.0], [77600.0, 3.0], [93600.0, 1.0], [90400.0, 1.0], [125600.0, 1.0], [136000.0, 5.0], [133700.0, 5.0], [67900.0, 10.0], [77500.0, 2.0], [74300.0, 2.0], [80700.0, 1.0], [83900.0, 1.0], [90300.0, 1.0], [93500.0, 1.0], [96700.0, 1.0], [99900.0, 1.0], [125500.0, 1.0], [157000.0, 1.0], [33500.0, 4.0], [35100.0, 4.0], [36700.0, 5.0], [38300.0, 5.0], [39900.0, 5.0], [41500.0, 3.0], [43100.0, 4.0], [44700.0, 4.0], [46300.0, 3.0], [47900.0, 3.0], [49500.0, 7.0], [51100.0, 5.0], [52700.0, 3.0], [54300.0, 4.0], [55900.0, 5.0], [57500.0, 44.0], [59100.0, 398.0], [60700.0, 15.0], [62300.0, 10.0], [65500.0, 3.0], [63900.0, 2.0], [67000.0, 3.0], [70200.0, 2.0], [73400.0, 1.0], [76600.0, 2.0], [89400.0, 1.0], [92600.0, 2.0], [127800.0, 1.0], [131000.0, 1.0], [133200.0, 1.0], [69300.0, 2.0], [66100.0, 3.0], [75700.0, 1.0], [78900.0, 2.0], [94900.0, 1.0], [120500.0, 1.0], [135000.0, 1.0], [17100.0, 3.0], [17900.0, 4.0], [18700.0, 3.0], [19500.0, 9.0], [20300.0, 3.0], [21100.0, 8.0], [21900.0, 4.0], [22700.0, 9.0], [23500.0, 3.0], [24300.0, 4.0], [25900.0, 7.0], [26700.0, 5.0], [27500.0, 5.0], [28300.0, 2.0], [29100.0, 5.0], [29900.0, 3.0], [30700.0, 8.0], [31500.0, 4.0], [32300.0, 2.0], [34200.0, 5.0], [132700.0, 2.0], [35800.0, 6.0], [37400.0, 4.0], [39000.0, 3.0], [40600.0, 9.0], [42200.0, 1.0], [43800.0, 6.0], [45400.0, 4.0], [47000.0, 3.0], [183900.0, 1.0], [48600.0, 4.0], [50200.0, 2.0], [51800.0, 3.0], [53400.0, 3.0], [55000.0, 4.0], [56600.0, 34.0], [58200.0, 50.0], [59800.0, 48.0], [61400.0, 22.0], [63000.0, 8.0], [64600.0, 3.0], [68400.0, 3.0], [74800.0, 2.0], [122800.0, 2.0], [136100.0, 7.0], [68300.0, 3.0], [71500.0, 1.0], [74700.0, 3.0], [77900.0, 1.0], [87500.0, 1.0], [93900.0, 1.0], [122700.0, 2.0], [33700.0, 8.0], [35300.0, 2.0], [36900.0, 4.0], [38500.0, 3.0], [40100.0, 1.0], [41700.0, 5.0], [43300.0, 1.0], [44900.0, 4.0], [46500.0, 3.0], [48100.0, 10.0], [49700.0, 5.0], [51300.0, 3.0], [52900.0, 5.0], [54500.0, 5.0], [56100.0, 8.0], [57700.0, 47.0], [59300.0, 132.0], [60900.0, 22.0], [62500.0, 6.0], [64100.0, 8.0], [77000.0, 1.0], [89800.0, 2.0], [135600.0, 3.0], [186800.0, 1.0], [133300.0, 4.0], [4100.0, 1.0], [66500.0, 5.0], [4500.0, 4.0], [69700.0, 2.0], [4700.0, 1.0], [76100.0, 6.0], [4900.0, 2.0], [5100.0, 1.0], [5300.0, 2.0], [5500.0, 2.0], [88900.0, 4.0], [92100.0, 2.0], [5900.0, 4.0], [6100.0, 5.0], [95300.0, 1.0], [6500.0, 5.0], [6700.0, 2.0], [6900.0, 4.0], [108100.0, 2.0], [7100.0, 1.0], [7300.0, 3.0], [7500.0, 4.0], [7700.0, 4.0], [7900.0, 1.0], [124100.0, 1.0], [8100.0, 12.0], [8200.0, 9.0], [8600.0, 2.0], [9000.0, 3.0], [9400.0, 5.0], [9800.0, 8.0], [10200.0, 3.0], [10600.0, 3.0], [11000.0, 3.0], [11400.0, 11.0], [11800.0, 5.0], [12200.0, 5.0], [12600.0, 2.0], [13000.0, 7.0], [13800.0, 2.0], [13400.0, 6.0], [14200.0, 4.0], [14600.0, 3.0], [15000.0, 3.0], [15400.0, 1.0], [15800.0, 6.0], [16200.0, 4.0], [17200.0, 5.0], [16400.0, 6.0], [18000.0, 8.0], [18800.0, 2.0], [19600.0, 6.0], [20400.0, 3.0], [21200.0, 3.0], [22000.0, 1.0], [22800.0, 5.0], [23600.0, 3.0], [24400.0, 4.0], [25200.0, 3.0], [26000.0, 2.0], [26800.0, 2.0], [27600.0, 1.0], [28400.0, 5.0], [29200.0, 5.0], [30000.0, 3.0], [30800.0, 4.0], [31600.0, 4.0], [32400.0, 4.0], [32800.0, 8.0], [34400.0, 3.0], [135100.0, 1.0], [36000.0, 2.0], [37600.0, 4.0], [39200.0, 2.0], [40800.0, 1.0], [42400.0, 3.0], [44000.0, 4.0], [45600.0, 2.0], [47200.0, 6.0], [48800.0, 2.0], [50400.0, 6.0], [52000.0, 4.0], [53600.0, 4.0], [55200.0, 2.0], [56800.0, 31.0], [58400.0, 131.0], [60000.0, 41.0], [61600.0, 14.0], [63200.0, 5.0], [64800.0, 12.0], [68800.0, 3.0], [65600.0, 3.0], [72000.0, 1.0], [75200.0, 3.0], [78400.0, 1.0], [84800.0, 1.0], [97600.0, 1.0], [104000.0, 1.0], [107200.0, 1.0], [126400.0, 1.0], [68700.0, 2.0], [71900.0, 1.0], [78300.0, 1.0], [87900.0, 1.0], [94300.0, 2.0], [116700.0, 1.0], [133000.0, 1.0], [33900.0, 9.0], [35500.0, 5.0], [38700.0, 1.0], [37100.0, 4.0], [40300.0, 6.0], [41900.0, 5.0], [43500.0, 4.0], [45100.0, 4.0], [46700.0, 3.0], [48300.0, 2.0], [49900.0, 5.0], [51500.0, 3.0], [54700.0, 5.0], [56300.0, 28.0], [57900.0, 46.0], [59500.0, 84.0], [61100.0, 16.0], [62700.0, 7.0], [64300.0, 11.0], [67800.0, 3.0], [71000.0, 2.0], [80600.0, 1.0], [122200.0, 1.0], [132500.0, 1.0], [151700.0, 2.0], [66900.0, 2.0], [70100.0, 4.0], [73300.0, 2.0], [76500.0, 3.0], [92500.0, 1.0], [111700.0, 1.0], [118100.0, 1.0], [16500.0, 7.0], [17300.0, 5.0], [18100.0, 2.0], [18900.0, 3.0], [19700.0, 6.0], [20500.0, 1.0], [21300.0, 5.0], [22100.0, 4.0], [22900.0, 4.0], [24500.0, 4.0], [25300.0, 3.0], [26100.0, 5.0], [26900.0, 2.0], [27700.0, 6.0], [28500.0, 5.0], [29300.0, 3.0], [30100.0, 3.0], [30900.0, 8.0], [31700.0, 10.0], [32500.0, 3.0], [33000.0, 5.0], [34600.0, 4.0], [36200.0, 3.0], [37800.0, 2.0], [39400.0, 5.0], [41000.0, 3.0], [42600.0, 6.0], [44200.0, 2.0], [45800.0, 5.0], [47400.0, 3.0], [49000.0, 3.0], [50600.0, 2.0], [52200.0, 3.0], [53800.0, 3.0], [55400.0, 8.0], [57000.0, 39.0], [58600.0, 577.0], [60200.0, 27.0], [61800.0, 12.0], [63400.0, 2.0], [65000.0, 6.0], [66000.0, 2.0], [69200.0, 4.0], [72400.0, 1.0], [75600.0, 3.0], [78800.0, 1.0], [85200.0, 1.0], [94800.0, 2.0], [123600.0, 1.0], [133600.0, 5.0], [65900.0, 7.0], [69100.0, 2.0], [72300.0, 1.0], [75500.0, 1.0], [78700.0, 2.0], [85100.0, 1.0], [97900.0, 1.0], [126700.0, 2.0], [135400.0, 1.0], [154600.0, 1.0], [34100.0, 9.0], [35700.0, 10.0], [37300.0, 3.0], [38900.0, 6.0], [40500.0, 3.0], [42100.0, 5.0], [43700.0, 4.0], [45300.0, 5.0], [46900.0, 5.0], [48500.0, 5.0], [50100.0, 3.0], [51700.0, 5.0], [53300.0, 5.0], [54900.0, 6.0], [56500.0, 38.0], [58100.0, 52.0], [59700.0, 49.0], [61300.0, 12.0], [62900.0, 11.0], [64500.0, 8.0], [68200.0, 4.0], [71400.0, 1.0], [74600.0, 2.0], [77800.0, 2.0], [90600.0, 1.0], [93800.0, 1.0], [106600.0, 1.0], [125800.0, 3.0], [129000.0, 3.0], [134900.0, 2.0], [67300.0, 3.0], [73700.0, 1.0], [70500.0, 1.0], [76900.0, 3.0], [86500.0, 1.0], [92900.0, 1.0], [124900.0, 1.0], [128100.0, 1.0], [8700.0, 7.0], [132600.0, 3.0], [8300.0, 1.0], [9100.0, 1.0], [9500.0, 6.0], [9900.0, 3.0], [10300.0, 3.0], [10700.0, 5.0], [11100.0, 1.0], [11500.0, 9.0], [11900.0, 5.0], [12700.0, 8.0], [12300.0, 3.0], [13100.0, 3.0], [13500.0, 2.0], [13900.0, 1.0], [14300.0, 3.0], [14700.0, 4.0], [15100.0, 5.0], [15500.0, 3.0], [15900.0, 2.0], [16300.0, 6.0], [16600.0, 4.0], [17400.0, 2.0], [18200.0, 5.0], [19000.0, 2.0], [19800.0, 5.0], [20600.0, 4.0], [21400.0, 4.0], [22200.0, 2.0], [23000.0, 5.0], [23800.0, 3.0], [24600.0, 5.0], [25400.0, 7.0], [26200.0, 6.0], [27000.0, 3.0], [27800.0, 3.0], [28600.0, 3.0], [29400.0, 3.0], [30200.0, 3.0], [31000.0, 3.0], [31800.0, 7.0], [32600.0, 6.0], [33200.0, 3.0], [34800.0, 3.0], [36400.0, 6.0], [38000.0, 3.0], [39600.0, 1.0], [41200.0, 4.0], [42800.0, 4.0], [44400.0, 6.0], [46000.0, 6.0], [47600.0, 2.0], [49200.0, 2.0], [50800.0, 3.0], [54000.0, 9.0], [55600.0, 8.0], [57200.0, 42.0], [58800.0, 1023.0], [60400.0, 32.0], [62000.0, 11.0], [65200.0, 6.0], [63600.0, 4.0], [66400.0, 1.0], [72800.0, 1.0], [76000.0, 1.0], [79200.0, 1.0], [95200.0, 2.0], [132800.0, 3.0], [69500.0, 5.0], [66300.0, 2.0], [75900.0, 1.0], [88700.0, 1.0], [91900.0, 1.0], [95100.0, 2.0], [127100.0, 1.0], [134600.0, 4.0], [34300.0, 3.0], [35900.0, 6.0], [37500.0, 9.0], [39100.0, 5.0], [40700.0, 4.0], [42300.0, 7.0], [43900.0, 3.0], [45500.0, 3.0], [47100.0, 2.0], [48700.0, 2.0], [50300.0, 9.0], [51900.0, 2.0], [53500.0, 5.0], [55100.0, 10.0], [56700.0, 35.0], [58300.0, 53.0], [59900.0, 44.0], [61500.0, 15.0], [63100.0, 13.0], [64700.0, 11.0], [68600.0, 6.0], [71800.0, 1.0], [78200.0, 2.0], [91000.0, 1.0], [100600.0, 1.0], [107000.0, 1.0], [129400.0, 1.0], [136400.0, 1.0], [67700.0, 2.0], [77300.0, 1.0], [90100.0, 1.0], [93300.0, 1.0], [96500.0, 1.0], [16700.0, 4.0], [17500.0, 5.0], [18300.0, 1.0], [19100.0, 2.0], [19900.0, 5.0], [20700.0, 2.0], [21500.0, 8.0], [22300.0, 4.0], [23100.0, 2.0], [23900.0, 5.0], [24700.0, 2.0], [25500.0, 1.0], [26300.0, 5.0], [27100.0, 4.0], [27900.0, 5.0], [28700.0, 3.0], [29500.0, 7.0], [30300.0, 3.0], [31100.0, 7.0], [32700.0, 5.0], [31900.0, 2.0], [33400.0, 3.0], [135900.0, 3.0], [35000.0, 6.0], [36600.0, 4.0], [38200.0, 3.0], [39800.0, 4.0], [41400.0, 2.0], [43000.0, 4.0], [44600.0, 6.0], [46200.0, 4.0], [47800.0, 1.0], [49400.0, 5.0], [51000.0, 1.0], [52600.0, 3.0], [54200.0, 2.0], [55800.0, 9.0], [57400.0, 46.0], [59000.0, 560.0], [60600.0, 28.0], [62200.0, 14.0], [63800.0, 6.0], [65400.0, 8.0], [66800.0, 1.0], [76400.0, 3.0], [127600.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 186800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 285.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 461151.0, "series": [{"data": [[0.0, 461151.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1569.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9296.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 285.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.75619064E12, "maxY": 500.0, "series": [{"data": [[1.75619082E12, 252.80571397534112], [1.75619178E12, 500.0], [1.75619112E12, 500.0], [1.75619118E12, 500.0], [1.75619148E12, 500.0], [1.75619106E12, 500.0], [1.75619136E12, 500.0], [1.75619142E12, 500.0], [1.75619076E12, 152.79043818211363], [1.75619172E12, 500.0], [1.75619064E12, 2.0541516245487363], [1.7561913E12, 500.0], [1.7561916E12, 500.0], [1.75619166E12, 500.0], [1.7561907E12, 54.66052440967705], [1.75619196E12, 1.0], [1.756191E12, 500.0], [1.75619154E12, 500.0], [1.75619184E12, 499.63228699551576], [1.75619088E12, 352.7228473581204], [1.7561919E12, 226.14699331848576], [1.75619094E12, 452.64856543417903], [1.75619124E12, 500.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75619196E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 16.14171122994652, "minX": 1.0, "maxY": 3905.4705882352946, "series": [{"data": [[2.0, 696.8426395939086], [3.0, 681.6584158415842], [4.0, 288.0571428571429], [5.0, 265.8988764044944], [6.0, 274.4942528735632], [7.0, 235.7017543859649], [8.0, 219.41423948220063], [9.0, 321.61320754716985], [10.0, 212.19076923076923], [11.0, 212.08695652173913], [12.0, 21.917460317460304], [13.0, 627.7414330218069], [14.0, 229.47400611620793], [15.0, 29.94303797468354], [16.0, 350.71875], [17.0, 23.116279069767447], [18.0, 465.6687697160884], [19.0, 29.35670731707315], [20.0, 245.98776758409784], [21.0, 238.86297376093296], [22.0, 242.71076923076924], [23.0, 141.5108359133127], [24.0, 136.55828220858896], [25.0, 235.76106194690266], [26.0, 226.26769230769233], [27.0, 56.01869158878507], [28.0, 761.771676300578], [29.0, 25.002958579881657], [30.0, 850.4024390243902], [31.0, 233.41758241758242], [32.0, 222.44797687861276], [33.0, 276.7208588957055], [34.0, 54.73142857142854], [35.0, 405.07262569832403], [36.0, 196.55172413793105], [37.0, 151.98850574712642], [38.0, 127.96531791907516], [39.0, 193.140243902439], [40.0, 55.021212121212095], [41.0, 30.520958083832316], [42.0, 390.83433734939746], [43.0, 248.3251533742332], [44.0, 239.42857142857142], [45.0, 313.17484662576686], [46.0, 255.61349693251532], [47.0, 219.96396396396398], [48.0, 511.84848484848493], [49.0, 146.23765432098767], [50.0, 141.45045045045046], [51.0, 192.85714285714283], [52.0, 193.23497267759555], [53.0, 32.31818181818183], [54.0, 291.3913043478262], [55.0, 144.7420289855072], [56.0, 188.67493112947656], [57.0, 112.44743935309972], [58.0, 121.36363636363637], [59.0, 209.4917582417583], [60.0, 191.5068870523416], [61.0, 68.40053763440861], [62.0, 470.9475138121548], [63.0, 166.7005494505495], [64.0, 117.41129032258065], [65.0, 330.7692307692308], [66.0, 129.0544959128065], [67.0, 102.98118279569894], [68.0, 177.36021505376343], [69.0, 268.0188172043012], [70.0, 158.30327868852464], [71.0, 183.90616621983918], [72.0, 16.14171122994652], [73.0, 215.83561643835623], [74.0, 170.2168021680215], [75.0, 75.76549865229109], [76.0, 159.7753424657534], [77.0, 222.91598915989164], [78.0, 170.99726027397267], [79.0, 134.8260869565218], [80.0, 99.09866666666667], [81.0, 142.58356164383565], [82.0, 389.8486486486486], [83.0, 45.889487870619945], [84.0, 200.98356164383557], [85.0, 236.15531335149865], [86.0, 69.7874659400545], [87.0, 264.6629834254144], [88.0, 81.91644204851752], [89.0, 190.0936639118457], [90.0, 186.92663043478268], [91.0, 49.14705882352941], [92.0, 198.87671232876698], [93.0, 211.45231607629432], [94.0, 98.24202127659576], [95.0, 174.07079646017695], [96.0, 205.15193370165724], [97.0, 131.40970350404314], [98.0, 240.02724795640324], [99.0, 78.84840425531914], [100.0, 250.59408602150535], [101.0, 175.22677595628411], [102.0, 75.12533333333333], [103.0, 211.41961852861039], [104.0, 205.82065217391306], [105.0, 113.15999999999997], [106.0, 345.04109589041093], [107.0, 113.47486033519554], [108.0, 184.35483870967738], [109.0, 289.9756756756759], [110.0, 52.43699731903486], [111.0, 232.6648351648352], [112.0, 226.75543478260857], [113.0, 55.949333333333335], [114.0, 276.05675675675684], [115.0, 196.76693766937672], [116.0, 124.06434316353887], [117.0, 442.34520547945215], [118.0, 45.357333333333344], [119.0, 169.21680216802167], [120.0, 318.97843665768187], [121.0, 63.95466666666667], [122.0, 241.32085561497334], [123.0, 270.9059139784945], [124.0, 130.04569892473123], [125.0, 256.51630434782606], [126.0, 140.44652406417111], [127.0, 226.4505494505494], [128.0, 489.5054347826089], [129.0, 48.21138211382113], [130.0, 186.28455284552862], [131.0, 347.36290322580624], [132.0, 105.31182795698925], [133.0, 393.47554347826093], [134.0, 93.89159891598914], [135.0, 136.11827956989242], [136.0, 426.26446280991775], [137.0, 79.6064690026954], [138.0, 228.67989417989426], [139.0, 340.4889502762433], [140.0, 109.67828418230562], [141.0, 288.55248618784526], [142.0, 240.43817204301084], [143.0, 154.88266666666664], [144.0, 383.9754768392372], [145.0, 108.1791443850268], [146.0, 209.65650969529094], [147.0, 401.5808219178082], [148.0, 70.80924855491328], [149.0, 258.3631436314363], [150.0, 378.72054794520557], [151.0, 66.11320754716985], [152.0, 391.78532608695645], [153.0, 249.3198924731187], [154.0, 164.17344173441728], [155.0, 392.15718157181584], [156.0, 161.78552278820396], [157.0, 222.39226519337015], [158.0, 444.8814016172505], [159.0, 60.36314363143631], [160.0, 377.7499999999998], [161.0, 283.75401069518733], [162.0, 68.87601078167121], [163.0, 513.1413043478259], [164.0, 123.55434782608685], [165.0, 185.24598930481272], [166.0, 338.6287262872626], [167.0, 256.36], [168.0, 395.9864498644987], [169.0, 285.62162162162144], [170.0, 142.4152046783626], [171.0, 304.77410468319556], [172.0, 344.2086720867208], [173.0, 72.92098092643053], [174.0, 538.1074380165289], [175.0, 176.81451612903228], [176.0, 232.81914893617014], [177.0, 420.0945945945945], [178.0, 202.25737265415546], [179.0, 343.6935483870966], [180.0, 356.9403794037941], [181.0, 142.74399999999997], [182.0, 501.0083565459613], [183.0, 196.96739130434776], [184.0, 191.6791443850266], [185.0, 446.5442359249331], [186.0, 188.88390501319276], [187.0, 665.8125000000001], [188.0, 263.7560975609758], [189.0, 187.21485411140577], [190.0, 545.6802168021682], [191.0, 320.4116094986807], [192.0, 149.344], [193.0, 522.7615176151762], [194.0, 211.78609625668463], [195.0, 407.34324324324314], [196.0, 326.08799999999997], [197.0, 78.67287234042546], [198.0, 533.0926430517711], [199.0, 363.2207446808509], [200.0, 231.00797872340428], [201.0, 519.1401617250672], [202.0, 147.95187165775414], [203.0, 411.809651474531], [204.0, 337.16981132075466], [205.0, 211.8032345013477], [206.0, 484.7940379403795], [207.0, 374.6586021505376], [208.0, 144.15508021390374], [209.0, 438.2362637362639], [210.0, 339.0026525198938], [211.0, 292.1648648648649], [212.0, 368.7738419618525], [213.0, 296.63999999999993], [214.0, 439.97018970189697], [215.0, 301.21798365122606], [216.0, 244.40970350404308], [217.0, 518.0731707317076], [218.0, 368.01612903225794], [219.0, 238.7922437673131], [220.0, 562.8965517241378], [221.0, 236.79356568364616], [222.0, 373.4510869565216], [223.0, 318.2486187845302], [224.0, 317.1436314363145], [225.0, 434.7384196185287], [226.0, 544.7826086956522], [227.0, 174.85483870967747], [228.0, 537.1869918699184], [229.0, 314.79508196721304], [230.0, 247.82384823848236], [231.0, 548.4325068870522], [232.0, 243.44385026737967], [233.0, 404.98924731182797], [234.0, 498.64343163538854], [235.0, 336.29569892473114], [236.0, 494.33967391304355], [237.0, 318.4324324324324], [238.0, 255.88140161725056], [239.0, 644.9098360655742], [240.0, 251.14634146341456], [241.0, 176.3413978494624], [242.0, 652.9919137466305], [243.0, 176.74663072776278], [244.0, 662.2655826558263], [245.0, 626.4661246612468], [246.0, 545.3844086021506], [247.0, 962.5663956639557], [248.0, 175.88440860215044], [249.0, 339.986631016043], [250.0, 643.376470588235], [251.0, 300.34036144578306], [252.0, 352.3172043010753], [253.0, 514.1989247311828], [254.0, 277.51752021563345], [255.0, 446.44864864864877], [257.0, 365.4243243243243], [256.0, 529.4125683060109], [258.0, 708.8653846153846], [259.0, 173.1090425531915], [260.0, 362.6666666666666], [261.0, 623.6415094339627], [262.0, 277.4986449864499], [263.0, 357.1222826086959], [264.0, 632.502688172043], [270.0, 193.88502673796785], [271.0, 381.6964769647696], [268.0, 457.19729729729704], [269.0, 635.1657608695648], [265.0, 323.5582655826558], [266.0, 631.5363881401614], [267.0, 194.57452574525738], [273.0, 374.8176943699734], [272.0, 644.4569892473118], [274.0, 662.1680216802165], [275.0, 282.8243243243242], [276.0, 296.1564986737401], [277.0, 753.591891891892], [278.0, 195.84054054054062], [279.0, 396.9594594594595], [280.0, 720.1852861035418], [286.0, 317.29301075268813], [287.0, 391.3577235772359], [284.0, 405.19832402234647], [285.0, 677.8256130790193], [281.0, 382.06951871657753], [282.0, 480.1159029649595], [283.0, 393.0463215258854], [289.0, 303.7896174863389], [288.0, 603.6693333333336], [290.0, 583.8629032258066], [291.0, 588.2975871313674], [292.0, 391.3726541554959], [293.0, 507.8978494623657], [294.0, 496.57258064516157], [295.0, 407.9565217391304], [296.0, 603.126005361931], [302.0, 501.8486486486484], [303.0, 418.38666666666654], [300.0, 301.6532258064517], [301.0, 621.5999999999999], [297.0, 303.93224932249313], [298.0, 312.3663101604274], [299.0, 841.4959568733159], [305.0, 342.9624664879358], [304.0, 628.7486338797813], [306.0, 440.91267605633806], [307.0, 627.4000000000003], [308.0, 416.9572192513366], [309.0, 542.9704301075266], [310.0, 530.7588075880758], [311.0, 440.63611859838255], [312.0, 753.7568306010934], [318.0, 642.6720430107525], [319.0, 434.78763440860223], [316.0, 322.59893048128333], [317.0, 535.7727272727275], [313.0, 408.2231182795699], [314.0, 420.3806970509383], [315.0, 653.4986301369868], [321.0, 588.0965147453086], [320.0, 548.8521505376345], [322.0, 366.34054054054036], [323.0, 766.0161725067383], [324.0, 324.4550264550263], [325.0, 671.4810810810808], [326.0, 561.1825613079022], [327.0, 353.6631016042781], [328.0, 670.2103825136614], [334.0, 579.6212534059948], [335.0, 575.5270270270271], [332.0, 346.21584699453547], [333.0, 457.2756756756754], [329.0, 441.5469168900803], [330.0, 451.7765667574934], [331.0, 982.4465753424661], [337.0, 681.0597826086954], [336.0, 473.82513661202177], [338.0, 466.2533692722373], [339.0, 589.6465753424661], [340.0, 581.6857923497267], [341.0, 348.9272237196763], [342.0, 837.8694444444445], [343.0, 358.03523035230353], [344.0, 377.1440217391303], [350.0, 716.7000000000003], [351.0, 477.89544235924916], [348.0, 720.8474114441417], [349.0, 364.8555555555558], [345.0, 834.9137466307279], [346.0, 581.3962765957448], [347.0, 475.79838709677426], [353.0, 951.8235294117644], [352.0, 249.56149732620318], [354.0, 500.1840659340657], [355.0, 500.9335106382979], [356.0, 621.1780821917805], [357.0, 703.2404371584701], [358.0, 609.1869918699186], [359.0, 646.4356164383557], [360.0, 258.5962059620599], [366.0, 385.2371967654987], [367.0, 896.5540540540538], [364.0, 634.0081743869209], [365.0, 513.3643835616438], [361.0, 995.1557377049177], [362.0, 488.2459459459461], [363.0, 512.8591160220994], [369.0, 740.363143631437], [368.0, 392.76164383561627], [370.0, 625.4032258064519], [371.0, 376.51752021563345], [372.0, 893.5191256830598], [373.0, 633.9675675675677], [374.0, 383.88948787061986], [375.0, 655.6821917808222], [376.0, 649.0054794520543], [382.0, 547.6334231805931], [383.0, 781.1603260869565], [380.0, 786.263586956522], [381.0, 507.90185676392565], [377.0, 524.6321525885558], [378.0, 801.2520547945211], [379.0, 410.29189189189196], [385.0, 407.043360433604], [384.0, 658.3800539083562], [386.0, 680.994475138122], [387.0, 640.3619302949062], [388.0, 667.8501362397819], [389.0, 767.3306010928962], [390.0, 594.5163043478259], [391.0, 675.2439678284182], [392.0, 549.14402173913], [398.0, 545.2439024390242], [399.0, 695.0842391304346], [396.0, 552.9756097560975], [397.0, 554.0570652173913], [393.0, 691.1331521739132], [394.0, 711.4528301886796], [395.0, 677.4332425068122], [401.0, 558.1567567567564], [400.0, 546.4715447154474], [402.0, 955.9618528610356], [403.0, 690.9892183288409], [404.0, 561.8315217391302], [405.0, 840.8108108108107], [406.0, 563.4223433242507], [407.0, 884.6130790190736], [408.0, 288.0904255319146], [414.0, 708.5449591280653], [415.0, 711.2092391304346], [412.0, 880.159029649596], [413.0, 730.1002710027095], [409.0, 835.5444743935307], [410.0, 704.0624999999998], [411.0, 430.6209677419358], [417.0, 859.8918918918921], [416.0, 425.94638069705104], [418.0, 612.1726027397257], [419.0, 299.4716981132073], [420.0, 921.2173913043476], [421.0, 579.4141689373292], [422.0, 728.1141304347825], [423.0, 726.2092391304345], [424.0, 599.7243243243244], [430.0, 451.4945945945943], [431.0, 910.321428571428], [428.0, 745.8773841961853], [429.0, 738.5831062670295], [425.0, 922.6584022038564], [426.0, 594.9809782608695], [427.0, 595.1803278688523], [433.0, 736.253369272237], [432.0, 597.8661202185797], [434.0, 974.0514905149041], [435.0, 449.8391420911528], [436.0, 1041.6304347826087], [437.0, 593.5698924731182], [438.0, 445.79784366576826], [439.0, 896.493261455526], [440.0, 600.1304347826091], [446.0, 461.81571815718144], [447.0, 1078.2752043596727], [444.0, 1096.833333333333], [445.0, 598.3870967741934], [441.0, 747.152815013405], [442.0, 892.1129032258069], [443.0, 307.84905660377353], [449.0, 325.0301369863014], [448.0, 631.3641304347818], [450.0, 1274.2930107526881], [451.0, 470.0935828877002], [452.0, 780.9701897018972], [453.0, 803.7972222222219], [454.0, 627.8951612903227], [455.0, 1186.3929539295389], [456.0, 479.80487804878055], [462.0, 331.17166212534073], [463.0, 974.4959128065399], [460.0, 484.04054054054075], [461.0, 1275.8733153638814], [457.0, 477.79132791327913], [458.0, 1124.8699186991867], [459.0, 646.7412398921837], [465.0, 335.1290322580645], [464.0, 998.6759002770086], [466.0, 977.7534246575339], [467.0, 791.3206521739131], [468.0, 723.4199395770393], [469.0, 968.1035422343324], [470.0, 971.0874316939888], [471.0, 689.5583333333328], [472.0, 1299.2249322493233], [478.0, 975.1580381471389], [479.0, 488.4239999999997], [476.0, 1139.2791327913283], [477.0, 805.8451086956527], [473.0, 968.3404825737273], [474.0, 646.6114130434786], [475.0, 809.9945799458001], [481.0, 806.7479674796748], [480.0, 1131.4783783783782], [482.0, 819.3142076502734], [483.0, 1130.83152173913], [484.0, 1079.5571428571427], [485.0, 911.4702702702705], [486.0, 983.5659340659349], [487.0, 976.3688524590161], [488.0, 1012.3018867924535], [494.0, 813.0216802168021], [495.0, 963.383783783784], [492.0, 820.5013698630138], [493.0, 813.7595628415299], [489.0, 818.8579234972676], [490.0, 640.9516129032257], [491.0, 983.1369863013706], [496.0, 824.6307277628033], [497.0, 986.088948787062], [498.0, 655.5040650406512], [499.0, 1115.9839142091153], [500.0, 1537.4885154427454], [1.0, 3905.4705882352946]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[405.3965945445755, 1119.1371455914555]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.75619064E12, "maxY": 475158.6, "series": [{"data": [[1.75619082E12, 420764.5], [1.75619178E12, 38562.833333333336], [1.75619112E12, 420894.6666666667], [1.75619118E12, 420608.2], [1.75619148E12, 38409.78333333333], [1.75619106E12, 421112.5333333333], [1.75619136E12, 412743.3333333333], [1.75619142E12, 51918.76666666667], [1.75619076E12, 420901.7], [1.75619172E12, 39251.53333333333], [1.75619064E12, 3165.766666666667], [1.7561913E12, 420425.9], [1.7561916E12, 102582.83333333333], [1.75619166E12, 37795.7], [1.7561907E12, 394406.8], [1.75619196E12, 42.583333333333336], [1.756191E12, 420243.6], [1.75619154E12, 39258.166666666664], [1.75619184E12, 40239.916666666664], [1.75619088E12, 420421.5], [1.7561919E12, 5830.366666666667], [1.75619094E12, 419462.13333333336], [1.75619124E12, 418870.9666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75619082E12, 475003.8], [1.75619178E12, 42247.5], [1.75619112E12, 474887.7], [1.75619118E12, 474565.2], [1.75619148E12, 42505.5], [1.75619106E12, 475132.8], [1.75619136E12, 465690.0], [1.75619142E12, 58578.9], [1.75619076E12, 475158.6], [1.75619172E12, 42428.1], [1.75619064E12, 3573.3], [1.7561913E12, 474358.8], [1.7561916E12, 113842.5], [1.75619166E12, 41963.7], [1.7561907E12, 445243.5], [1.75619196E12, 0.0], [1.756191E12, 474152.4], [1.75619154E12, 41163.9], [1.75619184E12, 42337.8], [1.75619088E12, 474616.8], [1.7561919E12, 5508.3], [1.75619094E12, 473442.9], [1.75619124E12, 472604.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75619196E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6.765342960288809, "minX": 1.75619064E12, "maxY": 132438.0, "series": [{"data": [[1.75619082E12, 327.70585519526145], [1.75619178E12, 8914.459254771271], [1.75619112E12, 813.3637573683258], [1.75619118E12, 815.5013047732964], [1.75619148E12, 8642.474939613516], [1.75619106E12, 814.5416757167678], [1.75619136E12, 829.4400831024919], [1.75619142E12, 6596.31689055275], [1.75619076E12, 199.0927404028878], [1.75619172E12, 8419.335437330967], [1.75619064E12, 6.765342960288809], [1.7561913E12, 815.8648700097915], [1.7561916E12, 3385.068697123519], [1.75619166E12, 9953.844505662704], [1.7561907E12, 74.87327249022152], [1.75619196E12, 132438.0], [1.756191E12, 816.2164544564193], [1.75619154E12, 8476.909677419351], [1.75619184E12, 9903.681315396141], [1.75619088E12, 456.41220917590755], [1.7561919E12, 38388.11804008907], [1.75619094E12, 634.0097817498121], [1.75619124E12, 818.8976416639374]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75619196E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75619064E12, "maxY": 34357.16926503337, "series": [{"data": [[1.75619082E12, 327.7027049046777], [1.75619178E12, 7992.328385337784], [1.75619112E12, 813.3608236220902], [1.75619118E12, 815.4981243883844], [1.75619148E12, 8545.954710144928], [1.75619106E12, 814.5386891833168], [1.75619136E12, 829.4368975069262], [1.75619142E12, 6596.3109447258275], [1.75619076E12, 199.08904816202374], [1.75619172E12, 8159.133152990674], [1.75619064E12, 6.700361010830326], [1.7561913E12, 815.8616338518543], [1.7561916E12, 2883.136040609129], [1.75619166E12, 9717.350474441371], [1.7561907E12, 74.86765174561833], [1.75619196E12, 0.0], [1.756191E12, 816.2130808575439], [1.75619154E12, 7857.726574500768], [1.75619184E12, 8536.974289985039], [1.75619088E12, 456.4085670797991], [1.7561919E12, 34357.16926503337], [1.75619094E12, 634.0063486008552], [1.75619124E12, 818.8944753794068]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75619196E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.004566210045662093, "minX": 1.75619064E12, "maxY": 132438.0, "series": [{"data": [[1.75619082E12, 0.00505132801042853], [1.75619178E12, 935.448348985158], [1.75619112E12, 0.0076331730638633235], [1.75619118E12, 0.007284984233989357], [1.75619148E12, 58.95018115942023], [1.75619106E12, 0.00792788879235447], [1.75619136E12, 0.0075346260387811415], [1.75619142E12, 0.05549438449680685], [1.75619076E12, 0.005972742574795032], [1.75619172E12, 349.7436128644427], [1.75619064E12, 0.16245487364620914], [1.7561913E12, 0.007206570216469057], [1.7561916E12, 619.2373378454616], [1.75619166E12, 726.8448117539037], [1.7561907E12, 0.0076198754164855725], [1.75619196E12, 132438.0], [1.756191E12, 0.007182500816193247], [1.75619154E12, 505.57757296466974], [1.75619184E12, 1410.693871449927], [1.75619088E12, 0.004566210045662093], [1.7561919E12, 10093.329621380848], [1.75619094E12, 0.00531320672461241], [1.75619124E12, 0.00802489354733049]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75619196E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.75619064E12, "maxY": 186802.0, "series": [{"data": [[1.75619082E12, 37529.0], [1.75619178E12, 127155.0], [1.75619112E12, 59259.0], [1.75619118E12, 59264.0], [1.75619148E12, 65023.0], [1.75619106E12, 59257.0], [1.75619136E12, 59279.0], [1.75619142E12, 60154.0], [1.75619076E12, 24687.0], [1.75619172E12, 111791.0], [1.75619064E12, 126.0], [1.7561913E12, 59281.0], [1.7561916E12, 132848.0], [1.75619166E12, 186802.0], [1.7561907E12, 12401.0], [1.756191E12, 59249.0], [1.75619154E12, 118136.0], [1.75619184E12, 154698.0], [1.75619088E12, 50483.0], [1.7561919E12, 129030.0], [1.75619094E12, 59019.0], [1.75619124E12, 59281.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75619082E12, 1.0], [1.75619178E12, 2.0], [1.75619112E12, 1.0], [1.75619118E12, 1.0], [1.75619148E12, 2.0], [1.75619106E12, 1.0], [1.75619136E12, 1.0], [1.75619142E12, 2.0], [1.75619076E12, 1.0], [1.75619172E12, 3.0], [1.75619064E12, 2.0], [1.7561913E12, 1.0], [1.7561916E12, 1.0], [1.75619166E12, 2.0], [1.7561907E12, 1.0], [1.756191E12, 1.0], [1.75619154E12, 2.0], [1.75619184E12, 2.0], [1.75619088E12, 1.0], [1.7561919E12, 8588.0], [1.75619094E12, 1.0], [1.75619124E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75619082E12, 23.0], [1.75619178E12, 57450.0], [1.75619112E12, 23.0], [1.75619118E12, 24.0], [1.75619148E12, 58956.4], [1.75619106E12, 24.0], [1.75619136E12, 24.0], [1.75619142E12, 58796.2], [1.75619076E12, 23.0], [1.75619172E12, 57892.0], [1.75619064E12, 9.0], [1.7561913E12, 24.0], [1.7561916E12, 316.0], [1.75619166E12, 58821.6], [1.7561907E12, 24.0], [1.756191E12, 24.0], [1.75619154E12, 57357.8], [1.75619184E12, 57794.70000000001], [1.75619088E12, 23.0], [1.7561919E12, 62082.799999999996], [1.75619094E12, 24.0], [1.75619124E12, 24.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75619082E12, 30121.280000048617], [1.75619178E12, 73405.55999999965], [1.75619112E12, 58809.96000000001], [1.75619118E12, 58811.990000000005], [1.75619148E12, 59893.24], [1.75619106E12, 58809.990000000005], [1.75619136E12, 58815.98], [1.75619142E12, 59509.16], [1.75619076E12, 17665.060000028483], [1.75619172E12, 67388.89999999997], [1.75619064E12, 17.0], [1.7561913E12, 58814.98], [1.7561916E12, 63301.559999999954], [1.75619166E12, 89485.28], [1.7561907E12, 50.9900000000016], [1.756191E12, 58817.990000000005], [1.75619154E12, 72996.15999999989], [1.75619184E12, 73757.01000000002], [1.75619088E12, 42753.73000006903], [1.7561919E12, 92688.55999999955], [1.75619094E12, 57539.890000000014], [1.75619124E12, 58816.990000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75619082E12, 16.0], [1.75619178E12, 83.0], [1.75619112E12, 16.0], [1.75619118E12, 16.0], [1.75619148E12, 83.0], [1.75619106E12, 16.0], [1.75619136E12, 16.0], [1.75619142E12, 80.0], [1.75619076E12, 16.0], [1.75619172E12, 83.0], [1.75619064E12, 6.0], [1.7561913E12, 16.0], [1.7561916E12, 21.0], [1.75619166E12, 84.0], [1.7561907E12, 16.0], [1.756191E12, 16.0], [1.75619154E12, 117.0], [1.75619184E12, 83.0], [1.75619088E12, 16.0], [1.7561919E12, 34110.0], [1.75619094E12, 16.0], [1.75619124E12, 16.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.75619082E12, 27.0], [1.75619178E12, 60435.2], [1.75619112E12, 27.0], [1.75619118E12, 27.0], [1.75619148E12, 59250.6], [1.75619106E12, 28.0], [1.75619136E12, 29.0], [1.75619142E12, 59141.399999999994], [1.75619076E12, 27.0], [1.75619172E12, 60048.0], [1.75619064E12, 11.0], [1.7561913E12, 28.0], [1.7561916E12, 635.0], [1.75619166E12, 59521.0], [1.7561907E12, 27.0], [1.756191E12, 28.0], [1.75619154E12, 60629.99999999999], [1.75619184E12, 60491.9], [1.75619088E12, 27.0], [1.7561919E12, 68023.8], [1.75619094E12, 27.0], [1.75619124E12, 28.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7561919E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6.0, "minX": 1.0, "maxY": 135974.5, "series": [{"data": [[2.0, 67937.0], [4.0, 51880.5], [5.0, 64539.0], [7.0, 35833.0], [8.0, 64129.0], [28.0, 19938.0], [38.0, 12388.5], [40.0, 279.5], [41.0, 45095.0], [42.0, 354.0], [43.0, 22992.0], [45.0, 120.0], [47.0, 244.0], [46.0, 57406.0], [49.0, 325.0], [48.0, 48181.5], [51.0, 118.0], [50.0, 199.0], [53.0, 117.0], [52.0, 161.0], [55.0, 82.0], [54.0, 85.0], [56.0, 82.0], [57.0, 81.0], [58.0, 82.0], [59.0, 81.0], [61.0, 117.0], [60.0, 82.0], [63.0, 82.0], [62.0, 82.0], [231.0, 22.0], [238.0, 22.0], [237.0, 21.0], [241.0, 22.0], [243.0, 22.0], [242.0, 21.0], [276.0, 6.0], [376.0, 9.0], [427.0, 19.0], [425.0, 19.0], [430.0, 19.0], [428.0, 19.0], [423.0, 19.0], [424.0, 19.0], [426.0, 19.0], [432.0, 11.0], [476.0, 13.5], [519.0, 16.0], [535.0, 18.0], [537.0, 18.0], [528.0, 18.0], [536.0, 18.0], [543.0, 18.0], [542.0, 18.0], [538.0, 17.0], [568.0, 16.0], [554.0, 17.0], [555.0, 17.0], [546.0, 17.0], [545.0, 18.0], [544.0, 18.0], [556.0, 17.0], [551.0, 18.0], [548.0, 18.0], [560.0, 17.0], [566.0, 17.0], [571.0, 17.0], [573.0, 17.0], [564.0, 17.0], [565.0, 17.0], [567.0, 17.0], [553.0, 17.0], [605.0, 16.0], [577.0, 17.0], [590.0, 16.0], [601.0, 16.0], [607.0, 16.0], [594.0, 16.0], [606.0, 16.0], [595.0, 16.0], [599.0, 16.0], [597.0, 16.0], [600.0, 16.0], [582.0, 16.0], [585.0, 17.0], [584.0, 16.0], [602.0, 16.0], [604.0, 16.0], [609.0, 16.0], [613.0, 16.0], [614.0, 16.0], [615.0, 16.0], [624.0, 16.0], [625.0, 16.0], [616.0, 16.0], [608.0, 16.0], [623.0, 16.0], [622.0, 16.0], [611.0, 16.0], [610.0, 16.0], [619.0, 16.0], [620.0, 16.0], [621.0, 16.0], [617.0, 16.0], [618.0, 16.0], [612.0, 16.0], [1.0, 52077.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[582.0, 65184.0], [615.0, 34315.0], [609.0, 60411.0], [45.0, 8691.0], [47.0, 33979.0], [49.0, 135872.0], [48.0, 13614.0], [50.0, 11513.0], [53.0, 133268.0], [52.0, 48382.0], [54.0, 46778.0], [55.0, 31849.0], [57.0, 32524.5], [56.0, 33659.0], [58.0, 16068.5], [59.0, 64936.0], [61.0, 124325.0], [60.0, 9800.0], [63.0, 28696.0], [62.0, 127752.5], [5.0, 62464.0], [7.0, 34624.0], [242.0, 133380.0], [1.0, 135974.5], [426.0, 134603.0], [28.0, 131069.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 625.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 67937.0, "series": [{"data": [[2.0, 67937.0], [4.0, 51880.5], [5.0, 64539.0], [7.0, 35833.0], [8.0, 64129.0], [28.0, 19938.0], [38.0, 12388.5], [40.0, 279.5], [41.0, 45095.0], [42.0, 354.0], [43.0, 22992.0], [45.0, 120.0], [47.0, 244.0], [46.0, 57406.0], [49.0, 325.0], [48.0, 48181.5], [51.0, 118.0], [50.0, 199.0], [53.0, 117.0], [52.0, 161.0], [55.0, 82.0], [54.0, 85.0], [56.0, 82.0], [57.0, 81.0], [58.0, 82.0], [59.0, 81.0], [61.0, 117.0], [60.0, 82.0], [63.0, 82.0], [62.0, 82.0], [231.0, 22.0], [238.0, 22.0], [237.0, 21.0], [241.0, 22.0], [243.0, 22.0], [242.0, 21.0], [276.0, 6.0], [376.0, 9.0], [427.0, 19.0], [425.0, 19.0], [430.0, 19.0], [428.0, 19.0], [423.0, 19.0], [424.0, 19.0], [426.0, 19.0], [432.0, 11.0], [476.0, 13.0], [519.0, 15.0], [535.0, 18.0], [537.0, 18.0], [528.0, 18.0], [536.0, 18.0], [543.0, 18.0], [542.0, 18.0], [538.0, 17.0], [568.0, 16.0], [554.0, 17.0], [555.0, 17.0], [546.0, 17.0], [545.0, 18.0], [544.0, 18.0], [556.0, 17.0], [551.0, 18.0], [548.0, 18.0], [560.0, 17.0], [566.0, 17.0], [571.0, 17.0], [573.0, 17.0], [564.0, 17.0], [565.0, 17.0], [567.0, 17.0], [553.0, 17.0], [605.0, 16.0], [577.0, 17.0], [590.0, 16.0], [601.0, 16.0], [607.0, 16.0], [594.0, 16.0], [606.0, 16.0], [595.0, 16.0], [599.0, 16.0], [597.0, 16.0], [600.0, 16.0], [582.0, 16.0], [585.0, 17.0], [584.0, 16.0], [602.0, 16.0], [604.0, 16.0], [609.0, 16.0], [613.0, 16.0], [614.0, 16.0], [615.0, 16.0], [624.0, 16.0], [625.0, 16.0], [616.0, 16.0], [608.0, 16.0], [623.0, 16.0], [622.0, 16.0], [611.0, 16.0], [610.0, 16.0], [619.0, 16.0], [620.0, 16.0], [621.0, 16.0], [617.0, 16.0], [618.0, 16.0], [612.0, 16.0], [1.0, 52077.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[582.0, 0.0], [615.0, 0.0], [609.0, 0.0], [45.0, 0.0], [47.0, 0.0], [49.0, 0.0], [48.0, 0.0], [50.0, 0.0], [53.0, 0.0], [52.0, 0.0], [54.0, 0.0], [55.0, 0.0], [57.0, 0.0], [56.0, 0.0], [58.0, 0.0], [59.0, 0.0], [61.0, 0.0], [60.0, 0.0], [63.0, 0.0], [62.0, 0.0], [5.0, 0.0], [7.0, 0.0], [242.0, 0.0], [1.0, 0.0], [426.0, 0.0], [28.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 625.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.666666666666667, "minX": 1.75619064E12, "maxY": 615.5666666666667, "series": [{"data": [[1.75619082E12, 615.3666666666667], [1.75619178E12, 55.016666666666666], [1.75619112E12, 613.55], [1.75619118E12, 613.1333333333333], [1.75619148E12, 55.2], [1.75619106E12, 613.8666666666667], [1.75619136E12, 601.6666666666666], [1.75619142E12, 75.68333333333334], [1.75619076E12, 615.5666666666667], [1.75619172E12, 55.45], [1.75619064E12, 4.666666666666667], [1.7561913E12, 612.8666666666667], [1.7561916E12, 147.75], [1.75619166E12, 54.45], [1.7561907E12, 576.9166666666666], [1.756191E12, 612.6], [1.75619154E12, 54.25], [1.75619184E12, 54.916666666666664], [1.75619088E12, 614.8666666666667], [1.75619094E12, 613.3], [1.75619124E12, 610.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75619184E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75619064E12, "maxY": 613.9, "series": [{"data": [[1.75619082E12, 613.7], [1.75619178E12, 54.583333333333336], [1.75619112E12, 613.55], [1.75619118E12, 613.1333333333333], [1.75619148E12, 54.916666666666664], [1.75619106E12, 613.8666666666667], [1.75619136E12, 601.6666666666666], [1.75619142E12, 75.68333333333334], [1.75619076E12, 613.9], [1.75619172E12, 54.81666666666667], [1.75619064E12, 4.616666666666666], [1.7561913E12, 612.8666666666667], [1.7561916E12, 147.08333333333334], [1.75619166E12, 54.21666666666667], [1.7561907E12, 575.25], [1.756191E12, 612.6], [1.75619154E12, 53.18333333333333], [1.75619184E12, 54.7], [1.75619088E12, 613.2], [1.7561919E12, 7.116666666666666], [1.75619094E12, 611.6833333333333], [1.75619124E12, 610.6]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75619178E12, 0.18333333333333332], [1.7561916E12, 0.43333333333333335], [1.75619166E12, 0.08333333333333333], [1.75619196E12, 0.016666666666666666], [1.75619184E12, 0.3333333333333333], [1.7561919E12, 0.11666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.ConnectTimeoutException", "isController": false}, {"data": [[1.75619178E12, 0.25], [1.7561916E12, 0.23333333333333334], [1.75619166E12, 0.15], [1.75619148E12, 0.2833333333333333], [1.75619154E12, 1.0666666666666667], [1.75619184E12, 0.7166666666666667], [1.7561919E12, 0.25], [1.75619172E12, 0.6333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75619196E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75619064E12, "maxY": 613.9, "series": [{"data": [[1.75619082E12, 613.7], [1.75619178E12, 54.583333333333336], [1.75619112E12, 613.55], [1.75619118E12, 613.1333333333333], [1.75619148E12, 54.916666666666664], [1.75619106E12, 613.8666666666667], [1.75619136E12, 601.6666666666666], [1.75619142E12, 75.68333333333334], [1.75619076E12, 613.9], [1.75619172E12, 54.81666666666667], [1.75619064E12, 4.616666666666666], [1.7561913E12, 612.8666666666667], [1.7561916E12, 147.08333333333334], [1.75619166E12, 54.21666666666667], [1.7561907E12, 575.25], [1.756191E12, 612.6], [1.75619154E12, 53.18333333333333], [1.75619184E12, 54.7], [1.75619088E12, 613.2], [1.7561919E12, 7.116666666666666], [1.75619094E12, 611.6833333333333], [1.75619124E12, 610.6]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.75619178E12, 0.43333333333333335], [1.7561916E12, 0.6666666666666666], [1.75619166E12, 0.23333333333333334], [1.75619196E12, 0.016666666666666666], [1.75619148E12, 0.2833333333333333], [1.75619154E12, 1.0666666666666667], [1.75619184E12, 1.05], [1.7561919E12, 0.36666666666666664], [1.75619172E12, 0.6333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75619196E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75619064E12, "maxY": 613.9, "series": [{"data": [[1.75619082E12, 613.7], [1.75619178E12, 54.583333333333336], [1.75619112E12, 613.55], [1.75619118E12, 613.1333333333333], [1.75619148E12, 54.916666666666664], [1.75619106E12, 613.8666666666667], [1.75619136E12, 601.6666666666666], [1.75619142E12, 75.68333333333334], [1.75619076E12, 613.9], [1.75619172E12, 54.81666666666667], [1.75619064E12, 4.616666666666666], [1.7561913E12, 612.8666666666667], [1.7561916E12, 147.08333333333334], [1.75619166E12, 54.21666666666667], [1.7561907E12, 575.25], [1.756191E12, 612.6], [1.75619154E12, 53.18333333333333], [1.75619184E12, 54.7], [1.75619088E12, 613.2], [1.7561919E12, 7.116666666666666], [1.75619094E12, 611.6833333333333], [1.75619124E12, 610.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75619178E12, 0.43333333333333335], [1.7561916E12, 0.6666666666666666], [1.75619166E12, 0.23333333333333334], [1.75619196E12, 0.016666666666666666], [1.75619148E12, 0.2833333333333333], [1.75619154E12, 1.0666666666666667], [1.75619184E12, 1.05], [1.7561919E12, 0.36666666666666664], [1.75619172E12, 0.6333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75619196E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

